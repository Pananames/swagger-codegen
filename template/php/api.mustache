<?php
/**
 * {{classname}}
 *
 * @category Class
 * @package  {{invokerPackage}}
 */

namespace {{apiPackage}};

{{#operations}}class {{classname}} extends ApiClient
{
	private $settings;

	public function __construct($signature, $url = null)
	{
		if (empty($signature)) {
			throw new \InvalidArgumentException('Signature was not provided or was invalid.');
		}

		$this->settings['url'] = $url;
		$this->settings['signature'] = $signature;
	}

	{{#operation}}
  /**
   * Function {{{operationId}}}
{{#summary}}
   *
   * {{{summary}}}
{{/summary}}
   *
{{#description}}
   * {{.}}
   *
{{/description}}
{{#allParams}}
   * @param {{dataType}} ${{paramName}} {{description}} {{#required}}(required){{/required}}{{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
{{/allParams}}
   * @return {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}
   */
	public function {{operationId}}({{#allParams}}${{paramName}}{{^required}} = {{#defaultValue}}'{{{.}}}'{{/defaultValue}}{{^defaultValue}}null{{/defaultValue}}{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
	{
		{{#allParams}}
		{{#required}}
		if (empty(${{paramName}})) {
			throw new \InvalidArgumentException('Missing the required parameter ${{paramName}} when calling {{operationId}}');
		}
		{{/required}}
		{{/allParams}}
		{{#allParams}}
		{{#hasValidation}}
		{{#maxLength}}
		if ({{^required}}!empty(${{paramName}}) && {{/required}}strlen(${{paramName}}) > {{maxLength}}) {
			throw new \InvalidArgumentException('Invalid length for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be smaller than or equal to {{maxLength}}.');
		}
		{{/maxLength}}
		{{#minLength}}
		if ({{^required}}!empty(${{paramName}}) && {{/required}}strlen(${{paramName}}) < {{minLength}}) {
			throw new \InvalidArgumentException('Invalid length for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be bigger than or equal to {{minLength}}.');
		}
		{{/minLength}}
		{{#maximum}}
		if ({{^required}}!empty(${{paramName}}) && {{/required}}${{paramName}} >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}}) {
			throw new \InvalidArgumentException('Invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be smaller than {{^exclusiveMaximum}} or equal to {{/exclusiveMaximum}}{{maximum}}.');
		}
		{{/maximum}}
		{{#minimum}}
		if ({{^required}}!empty(${{paramName}}) && {{/required}}${{paramName}} <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}}) {
			throw new \InvalidArgumentException('Invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be bigger than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}{{minimum}}.');
		}
		{{/minimum}}
		{{#pattern}}
		if ({{^required}}!empty(${{paramName}}) && {{/required}}!preg_match("{{{pattern}}}", ${{paramName}})) {
			throw new \InvalidArgumentException("Invalid value for \"{{paramName}}\" when calling {{classname}}.{{operationId}}, must conform to the pattern {{{pattern}}}.");
		}
		{{/pattern}}
		{{#maxItems}}
		if ({{^required}}!empty(${{paramName}}) && {{/required}}count(${{paramName}}) > {{maxItems}}) {
			throw new \InvalidArgumentException('Invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, number of items must be less than or equal to {{maxItems}}.');
		}
		{{/maxItems}}
		{{#minItems}}
		if ({{^required}}!empty(${{paramName}}) && {{/required}}count(${{paramName}}) < {{minItems}}) {
			throw new \InvalidArgumentException('Invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, number of items must be greater than or equal to {{minItems}}.');
		}
		{{/minItems}}
		{{/hasValidation}}
		{{/allParams}}
		{{#pathParams}}$url = str_replace('{'.'{{baseName}}'.'}', ObjectSerializer::toPathValue(${{paramName}}), '{{{path}}}');{{/pathParams}}{{^pathParams}}$url = '{{{path}}}';{{/pathParams}}
		{{#queryParams}}
		if (!empty(${{paramName}})) {
			$data['{{baseName}}'] = ObjectSerializer::toQueryValue(${{paramName}});
		}
		{{/queryParams}}

		{{#returnType}}$returnType = '{{returnType}}';{{/returnType}}

		return $this->sendRequest('{{httpMethod}}', $url, {{#bodyParams}}${{paramName}}{{/bodyParams}}{{^bodyParams}}{{#queryParams}}{{#-first}}$data{{/-first}}{{/queryParams}}{{^queryParams}}[]{{/queryParams}}{{/bodyParams}}, $this->settings{{#returnType}}, $returnType{{/returnType}});
	}

	{{/operation}}
}
{{/operations}}
